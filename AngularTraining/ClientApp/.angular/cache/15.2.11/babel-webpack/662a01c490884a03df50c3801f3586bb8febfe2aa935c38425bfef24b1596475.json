{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class TokenInterceptor {\n  intercept(req, next) {\n    if (req.url.includes(\"riotgames\")) {\n      const modifiedReq = req.clone({\n        headers: req.headers.set('X-Riot-Token', environment.lolApiKey).set('Content-Type', 'application/json')\n      });\n      console.log(\"jo\");\n      return next.handle(modifiedReq);\n    } else return next.handle(req);\n  }\n  static {\n    this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,6BAA6B;;AAIzD,OAAM,MAAOC,gBAAgB;EAE3BC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAID,GAAG,CAACE,GAAG,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;MACjC,MAAMC,WAAW,GAAGJ,GAAG,CAACK,KAAK,CAAC;QAC5BC,OAAO,EAAEN,GAAG,CAACM,OAAO,CACjBC,GAAG,CAAC,cAAc,EAAEV,WAAW,CAACW,SAAS,CAAC,CAC1CD,GAAG,CAAC,cAAc,EAAE,kBAAkB;OAC1C,CAAC;MACFE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjB,OAAOT,IAAI,CAACU,MAAM,CAACP,WAAW,CAAC;KAChC,MAEC,OAAOH,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC;EAG3B;;;uBAhBWF,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAc,SAAhBd,gBAAgB;IAAA;EAAA","names":["environment","TokenInterceptor","intercept","req","next","url","includes","modifiedReq","clone","headers","set","lolApiKey","console","log","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\darre\\Documents\\GitHub\\AngularTraining\\AngularTraining\\ClientApp\\src\\app\\token-incerceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../environments/environment';\r\n\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (req.url.includes(\"riotgames\")) {\r\n      const modifiedReq = req.clone({\r\n        headers: req.headers\r\n          .set('X-Riot-Token', environment.lolApiKey)\r\n          .set('Content-Type', 'application/json'),\r\n      });\r\n      console.log(\"jo\")\r\n      return next.handle(modifiedReq);\r\n    }\r\n    else\r\n      return next.handle(req);\r\n\r\n  \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}